<#@ template hostspecific="true" language="C#" debug="true"#>
<#@ output extension=".cs" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="EnvDTE"#>
<#
	var input = System.IO.File.ReadAllText(GetParentFilePath());
#>

// TODO: Generate code from file <#= GetParentFilePath()#>

<#
	// Use the input itself - e.g. when reading an xml file to parse with xml parser
    this.WriteLine(input);

	// Or use a FileCodeModel if the Input is a C# or VB File
	try{
		foreach (var c in this.GetParentFileCodeModel().CodeElements){
			try{this.WriteLine("// Namespace or Class found in file named " + (c as CodeElement).FullName);}catch{}
		}
	}catch{}
#>


<#+ /// CODE BLOCK FOR T4 HELPER METHODS

	/// <Summary> Get the FilePath of the Input file for this dependent T4 file </Summary>
	string GetParentFilePath(){
	  return GetParentProjectItem().Properties.Item("FullPath").Value.ToString();
	}

	/// <Summary> Gets the FileCodeModel which contains method definitons etc. for the Input File - e.g. if it is C# or VB File  </Summary>
	FileCodeModel GetParentFileCodeModel(){
		return GetParentProjectItem().FileCodeModel;
	}
		/// <Summary> Get the Visual Studio ProjectItem of the Input file for this dependent T4 file </Summary>
	ProjectItem GetParentProjectItem(){
		var dte = GetDTEObject();
		var myProjectItem =  dte.Solution.FindProjectItem(this.Host.TemplateFile);	
		return  myProjectItem.Collection.Parent as EnvDTE.ProjectItem;
	}

    /// <Summary> Get the Visual Studio Automation Object</Summary>
	EnvDTE.DTE GetDTEObject(){
		var host = this.Host as ITextTemplatingEngineHost;	
		var hostServiceProvider = host as IServiceProvider;
		EnvDTE.DTE dte = null;
		if (hostServiceProvider != null)
		{
			dte = hostServiceProvider.
			GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
		}
		return dte;
	}

#>